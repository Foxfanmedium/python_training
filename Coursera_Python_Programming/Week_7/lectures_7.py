#=====================================================================================
#fSet = {3, 1, 2} задание множества
#sSet = {1, 2, 3}
#   print (fSet == sSet)
#=====================================================================================

#myList = list(map(int,input().split()))
#mySet = set(myList)
#print(mySet)


#=====================================================================================
#myList = map(int,input().split())
#mySet = set(myList)
#print(mySet)
#=====================================================================================
#mySet = {1, 3.14, 'abc', (1,2)}  только неизменяемые объекты
#print(mySet)
#=====================================================================================
#mySet = {1, 3.14, 'abc', frozenset ({1, 2})}
#print(mySet)
#=====================================================================================
#mySet = {1, 3.14, 'abc', frozenset ({1, 2})}
#print(frozenset(mySet))
#=====================================================================================
#mySet = {1, 2, 3, 1, 2, 4}
#print(*mySet) выведение упорядоченного списка для маленьких чисел
#=====================================================================================

#mySet = {1, 202561154641, 3, 1, 2, 4000000000000245}
#print(sorted(list(mySet)))
#=====================================================================================
#mySet = set('abcdabsc') подсчет сколько различных символов храниться в строке
#print(len(mySet))
#=====================================================================================
#mySet = {1, 2, 3, 40000}
#for elem in mySet:
#    print(elem)
#=====================================================================================
#primes = {2, 3, 5, 7, 11, 13}
#n = int(input())
#if n in primes:
#    print('in set')
#else:
#    print('not in set')
#=====================================================================================
#primes = {2, 3, 5, 7, 11, 13}
#n = int(input())
#if not n in primes:             # OR if n not in primes:
#    print('not in set')
#else:
#    print('in set')
#=====================================================================================
#primes = {2, 3, 5, 7, 11, 13}
#primes.add(17) добавления числа во множество
#print(*primes)
#=====================================================================================

#primes = {2, 3, 5, 7, 11, 13}
#primes.remove(13)    #  удаления числа из множества
#print(*primes)
#=====================================================================================
#primes = {2, 3, 5, 7, 11, 13}
#primes.discard(13)      #  удаления числа из множества если не нужно проверять что удаляемое значение есть в списке
#print(*primes)
#=====================================================================================
#a = {1, 2, 3, 4}
#b = {1, 3}
#print(a == b)
#print(a !=b)
#print(a < b)
#print(a > b)
#print(a <= b)
#print(a >= b)
#=====================================================================================
#a = {1, 2, 3, 4}
#b = {1, 3, 5}
#print(a | b)
#print(a & b) пересечение чисел в двух множествах
#print(a - b)
#print(a ^ b) симметрическое равенство
#=====================================================================================
#capitals = {'Russia' : 'Moscow', 'France' : 'Paris'}
#capitals['USA'] = 'Washington' добавление ключа и его значения в уже существующий список
#print(capitals['USA'])
#=====================================================================================
#capitals = {'Russia':'Moscow','France':'Paris'}
#capitals['USA'] = 'Washington'
#print(*capitals)
#=====================================================================================
#capitals = {'Russia':'Moscow','France':'Paris'}
#capitals['USA'] = 'Washington'
#del capitals['France'] #удаление Франции из словаря
#print(capitals)
#=====================================================================================
#capitals = {'Russia':'Moscow','France':'Paris'}
#capitals['USA'] = 'Washington'
#print('Russia' in capitals)
#=====================================================================================
#myDict = dict([('x', 5), ('y', 3)]) # создание словаря
#print(myDict)
#=====================================================================================
#myDict = dict([('x', 5), ('y', 3)])
#for i in myDict: # перебрать все ключи словаря
#    print(i)
#=====================================================================================
#myDict = dict([('x', 5), ('y', 3)])
#for i in myDict: # перебрать все ключи словаря
#    print(i, myDict[i]) # вывести ключи и их значения при переборе ключей в словаре
#=====================================================================================
#s = input()
#letters = dict()
#for c in s:
#    if c in letters:
#        letters[c] += 1 # если буква встречается несколько раз, то прибавить плюс 1 каждый раз
#    else:
#        letters[c] = 1
#for c in sorted(letters):
#    print(c, letters[c]) # вывести сортированный список встречающихся букв
#=====================================================================================
#s = input()
#letters = dict()
#for c in s:
#    if c not in letters:
#        letters[c] = 0 #
#    letters[c] += 1
#for c in sorted(letters):
#    print(c, letters[c]) # вывести сортированный список встречающихся букв
#=====================================================================================
#s = input()
#letters = dict()
#for c in s:
#    letters[c] = letters.get(c, 0) + 1 # использование метода get
#for c in sorted(letters):
#    print(c, letters[c])
#=====================================================================================
#gasCost = {}
#n = int(input())
#a92, a95, a98 = map(int, input().split())
#gasCost[92] = a92
#gasCost[95] = a95
#gasCost[98] = a98
#for i in range (n - 1):
#    a92, a95, a98 = map(int, input().split())
#    gasCost[92] = min(a92, gasCost[92])
#    gasCost[95] = min(a95, gasCost[95])
#    gasCost[98] = min(a98, gasCost[98])
#print(gasCost[92], gasCost[95], gasCost[98])
#=====================================================================================
#gasCost = {}
#n = int(input())
#costs = list(map(int, input().split()))
#btypes = (92, 95, 98)
#for now in range(len(btypes)):
#    gasCost[btypes[now]] = costs[now]
#for i in range(n - 1):
#    costs = list(map(int, input().split()))
#    for now in range(len(btypes)):
#        gasCost[btypes[now]] = min(costs[now], gasCost[btypes[now]])
#print(gasCost[92], gasCost[95], gasCost[98])
#=====================================================================================
#s = input()
#print(s.isalpha()) # - проверяет, что все символы строки являются буквами.
#s.alnum() - проверяет, что все символы строки являются буквами или цифрами.
#s.isdigit()  проверяет, что все символы строки являются цифрами.
#s.islower() проверяет, что все символы строки являеются маленькими (строчными) буквами.
#s.isupper() проверяет, что все символы строки являеются большими (заглавными, прописными) буквами.
#s.strip()   обрезает все пробельные символы в начале строки.
#s.lstrip()   обрезает все пробельные символы в конце строки.
#s.rstrip()   обрезает все пробельные символы в начале и конце строки.
#=====================================================================================
#fin = open('input.txt')
#myDict = {}
#for line in fin:
#    eng, latins = line.split('-')
#    latinsList = latins.split(',')
#    eng = eng.strip()
 #   for latin in latinsList:
#        if latin.strip() not in myDict:
 #           myDict[latin.strip()] = []
#        myDict[latin.strip()].append(eng)
#print(myDict)
#=====================================================================================
#fin = open('input.txt')
#myDict = {}
#for line in fin:
#    eng, latins = line.split('-')
#    latinsList = latins.split(',')
#    eng = eng.strip()
 #   for latin in latinsList:
#        if latin.strip() not in myDict:
#           myDict[latin.strip()] = []
#        myDict[latin.strip()].append(eng)
#for latin in sorted(myDict):
#    print(latin, '-', ', '.join(sorted(myDict[latin])))
#=====================================================================================
tree = {'a':{
            'b': dict(),
            'c':{
                'd':dict(),
                'e':dict()
            }
        }
    }

















































