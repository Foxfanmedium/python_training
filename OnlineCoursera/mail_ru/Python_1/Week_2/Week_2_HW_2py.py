"""
Чтобы передавать данные между функциями, модулями или разными системами используются форматы данных.
Одним из самых популярных форматов является JSON. Напишите декоратор to_json, который можно применить к различным
функциям, чтобы преобразовывать их возвращаемое значение в JSON-формат. Не забудьте про сохранение
 корректного имени декорируруемой функции.
@to_json
def get_data():
  return {
    'data': 42
  }

get_data()  # вернёт '{"data": 42}'
"""

import functools
import json


def to_json(func):
    @functools.wraps(func)
    def wrapped(*args, **kwargs):
        return json.dumps(func(*args, **kwargs))

    return wrapped


"""@to_json
def get_data():
  return {
    'data': 42
  }

get_data()"""

"""Решение
Несмотря на простоту задачи, похожий декоратор так или иначе встречается в каждом современном веб-приложении на Python. 
Задание помогло нам разобраться с тем, как работают обычные декораторы, и обратить внимание на несколько моментов. 
Во-первых, использование декоратора wraps поможет вам избежать проблем с отладкой и логированием, во-вторых, 
декораторы практически всегда пишутся так, чтобы их можно было применить к любой функции, то есть в определении 
новой функции используются *args и **kwargs.
"""

import functools
import json


def to_json(func):
    @functools.wraps(func)
    def wrapped(*args, **kwargs):
        result = func(*args, **kwargs)
        return json.dumps(result)
    return wrapped
